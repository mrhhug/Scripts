(defun isprime (x)
  (if (< x 2)
	  (return-from isprime nil)
	(dotimes (i (+ (ceiling (sqrt x)) 1))
	  (if (> i 1)
		  (if (< i x)
			  (if (equal (mod x i) 0)
				  (return-from isprime nil))))))
  (return-from isprime t))
 
(defun factorial (n)
  (if (< n 2)
      1
    (* n (factorial (- n 1)))))
;(print (factorial 10))
(defparameter *circularprimes* 0)
(loop for i from 2 to 1000000 do 
	(defparameter *string* (string (write-to-string i)))
	(defparameter *total* 0)
	(defparameter *count* 0)
	(defparameter *running* (length *string*))
	;(print (concatenate 'string (subseq *string* (- (length *string*) 1)  (length *string*)) (subseq *string* (- (length *string*) 3)  (- (length *string*) 1))))
	(loop repeat (length *string*) do (defparameter *string* (concatenate 'string (subseq *string* (- (length *string*) 1)  (length *string*)) 
(subseq *string* 0  (- (length *string*) 1)))) (if (isprime (parse-integer *string*)) (setq *count* (1+ *count*)))  (setq *running* (1- *running*)) 
;(if (isprime (parse-integer *string*)) (print *string*))
	;(print (check-prime 197))
	(if (= *count* (length *string*)) (setq *circularprimes* (1+ *circularprimes*)))
	;(print *string*)
	;(if (= i *total*) (print i))
))
;(print (isprime 7 ))
(print *circularprimes*)
;might have to compile this one. :-)