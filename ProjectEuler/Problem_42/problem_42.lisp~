;; (defparameter *running* (* 15 26)) ;;;;;;;i am guessing there are going to be max 15 "Z"s.... in this set. really just a number selected by observation of human random.
;; (defparameter *concanating* "")
;; 
;; (defun count-sub (str pat)
;; (loop with z = 0 with s = 0 while s do
;; 	(when (setf s (search pat str :start2 s))
;; 	  (incf z) (incf s (length pat)))
;; 	finally (return z)))
;; 
;; (loop for i from 1 to 11 do
;;   (defparameter J (* (/ 1 2) i (+ 1 i)))
;;   (setf *concanating* (concatenate 'string *concanating* (string (write-to-string J)) " ")) 
;; )
;; (PRINT *concanating*)
;; (PRINT (count-sub *concanating* "55"))
;; (defparameter *stringggg* "")
;; (with-open-file (stream "/home/michael/Scripts/ProjectEuler/Problem_42/words.txt")
;;     (do ((*r* (read-line stream nil)
;;                (read-line stream nil)))
;;         ((null *r*))
;;         (setf *stringggg* *r*)
;; ;;         (print *r*)
;;         ))
;; (coerce "#\linefeed" 'character)
;; (defparameter *strin* "")
        
;; (print *strin*)
;; (defparameter *st* "1+2+33+ ")
;; (defparameter *numbers* 0)
;; (defparameter *word* "")
;; (defparameter *smallnumbers* "")
;; 
;; (defun *add* ()
;;   (setf *word* (concatenate 'string  (string (write-to-string *numbers*)) " "))
;; )
;; (defun *together* ()
;;   (setf *numbers* (+ *numbers* (parse-integer *smallnumbers*)))
;; )
;; ;;   (setf *smallnumbers* "")   
;; (loop for i from 0 to (- (length *st*) 1) do
;;   (if (string= "+" (subseq *st* i (+ i 1))) (*together*) (if (string= " " (subseq *st* i (+ i 1))) (*add*) (setf *smallnumbers* (subseq *st* i (+ i 1)) ) ))
;; ;;   (print *smallnumbers*)
;; )
;; (print *word*)

(with-open-file (stream "/home/michael/Scripts/ProjectEuler/Problem_42/words.txt")
    (do ((*r* (read-line stream nil)
               (read-line stream nil)))
        ((null *r*))
        (setf *stringggg* *r*)))
;(print *stringggg*)
(defparameter *strin* "(setf num(+ ")
(defparameter num 0)
(loop for i from 0 to (- (length *stringggg*) 1) do

(if (= num 1) (print "true") (if (= num 3) (print "true") (if (= num 6) (print "true") (if (= num 10) (print "true") (if (= num 15) (print "true") 
(if (= num 21) (print "true") (if (= num 28) (print "true") (if (= num 36) (print "true") (if (= num 45) (print "true") (if (= num 55) (print "true")
(if (= num 66) (print "true") (if (= num 78) (print "true") (if (= num 91) (print "true") (if (= num 105) (print "true") (if (= num 120) (print "true")
(if (= num 136) (print "true") (if (= num 153) (print "true") (if (= num 171) (print "true") (if (= num 190) (print "true") (if (= num 210) (print "true")
(if (= num 231) (print "true") (if (= num 253) (print "true")))))))))))))))))))))))


	  (if (string= "," (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "))" (STRING #\Linefeed) 
	  "(if (= num 1) (print \"true\") (if (= num 3) (print \"true\") (if (= num 6) (print \"true\") (if (= num 10) (print \"true\") (if (= num 15) (print \"true\") 
(if (= num 21) (print \"true\") (if (= num 28) (print \"true\") (if (= num 36) (print \"true\") (if (= num 45) (print \"true\") (if (= num 55) (print \"true\")
(if (= num 66) (print \"true\") (if (= num 78) (print \"true\") (if (= num 91) (print \"true\") (if (= num 105) (print \"true\") (if (= num 120) (print \"true\")
(if (= num 136) (print \"true\") (if (= num 153) (print \"true\") (if (= num 171) (print \"true\") (if (= num 190) (print \"true\") (if (= num 210) (print \"true\")
(if (= num 231) (print \"true\") (if (= num 253) (print \"true\")))))))))))))))))))))))"
	  "(setf num(" "+ " )))
	  (if (string= "A" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "1 ")))
	  (if (string= "B" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "2 ")))
	  (if (string= "C" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "3 ")))
	  (if (string= "D" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "4 ")))
	  (if (string= "E" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "5 ")))
	  (if (string= "F" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "6 ")))
	  (if (string= "G" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "7 ")))
	  (if (string= "H" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "8 ")))
	  (if (string= "I" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "9 ")))
	  (if (string= "J" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "10 ")))
	  (if (string= "K" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "11 ")))
	  (if (string= "L" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "12 ")))
	  (if (string= "M" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "13 ")))
	  (if (string= "N" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "14 ")))
	  (if (string= "O" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "15 ")))
	  (if (string= "P" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "16 ")))
	  (if (string= "Q" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "17 ")))
	  (if (string= "R" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "18 ")))
	  (if (string= "S" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "19 ")))
	  (if (string= "T" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "20 ")))
	  (if (string= "U" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "21 ")))
	  (if (string= "V" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "22 ")))
	  (if (string= "W" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "23 ")))
	  (if (string= "X" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "24 ")))
	  (if (string= "Y" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "25 ")))
	  (if (string= "Z" (subseq *stringggg* i (+ i 1))) (setf *strin* (concatenate 'string *strin* "26 ")))
	)
	(setf *strin* (concatenate 'string *strin* "))"))
(print *strin*)
;(print (CONCATENATE 'STRING "foo" (STRING #\Linefeed) "bar" ))
;; (defparameter *aaaa* "")
;; (defparameter *bbbb* "")
;; (loop for i from 0 to (- (length *strin*) 1) do
;;   (setf *aaaa* (subseq *stringggg* i (+ i 1)))
;;   (if (string= " " *aaaa* ) (setf *strin* (concatenate 'string *strin* " "  ))) 
;;   (if (string= "+" *aaaa* ) (setf *strin* (concatenate 'string *strin* " "  )))
;;   (setf *bbbb* (concatenate 'string *bbbb* *aaaa*  ))
;;   
;;   (setf *aaaa* "")
;;   )