(defun triangle (n)
  (return-from triangle (/ (* n (+ 1 n) ) 2 ) )
)
(defun pentagonal (n)
  (return-from pentagonal (/ (* n (- (* 3 n) 1) ) 2) )
)
(defun hexagonal (n)
  (return-from hexagonal (* n (- (* 2 n) 1) ) )
)
(defparameter *triangle* 0)
(defparameter *pentagonal* 5)
(defparameter *hexagonal* 6)
(defparameter *p* 144)
(defparameter *h* 144)

(defun recurs ()
  (if (= *pentagonal* *hexagonal*) (progn (print *pentagonal*) (return-from recurs t) ) )
  (if (< *pentagonal* *hexagonal*) (progn (incf *p*) (setf *pentagonal* (pentagonal *p*) ) ) )
  (if (< *hexagonal* *pentagonal*) (progn (incf *h*) (setf *hexagonal* (hexagonal *h*) ) ) )
  (recurs)
)
(recurs)
;; (loop for i from  0 to *max* do
;;   ;(print (triangle i))
;;   ;(print (pentagonal i))
;;   ;(print (hexagonal i))
;; ;;   ;(vector-push-extend (triangle i) *array1*)
;; ;;   (vector-push-extend (pentagonal i) *array2*)
;; ;;   (vector-push-extend (hexagonal i) *array3*)
;; ;;   ;(hexagonal i)
;; )
;(vector-pop *array1*)
;(print (position 40755 *array1*))

;; (loop for i from  0 to *max* do
;;   (setf *f* (hexagonal i))
;;   (position *f* *array1*)
;; )
;; (loop do
;; (setf *temp* (vector-pop *array3*))
;; (if (position *temp* *array2*) (print *temp*))
;; )